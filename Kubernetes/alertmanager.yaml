apiVersion: monitoring.coreos.com/v1
kind: Alertmanager
metadata:
  name: kube-prometheus-stack-alertmanager # This should match your existing Alertmanager instance name
  namespace: monitoring
  labels:
    alertmanager: kube-prometheus-stack-alertmanager # Standard label for the Alertmanager instance
    app.kubernetes.io/name: alertmanager
    app.kubernetes.io/managed-by: prometheus-operator
    app.kubernetes.io/instance: kube-prometheus-stack # Typically from your Helm chart release name
    release: kube-prometheus-stack # Standard label, matching your AlertmanagerConfig CRD
spec:
  # The configuration is now embedded directly here as a multi-line string.
  # This replaces the need for 'spec.configSecret.name'.
  config: |
    # This is the main Alertmanager configuration.
    # It contains GLOBAL SMTP settings and GLOBAL alert grouping rules,
    # and points to where custom templates are located.

    global:
      smtp_from: 'adebunmi33@gmail.com' # Your Gmail address
      smtp_smarthost: 'smtp.gmail.com:587' # Gmail's SMTP server and port
      smtp_auth_username: 'adebunmi33@gmail.com' # Your Gmail address for authentication
      smtp_auth_password: 'njid zanu qmtl fyjx' # Your Gmail App Password (no spaces)
      smtp_require_tls: true

    route:
      receiver: 'default-receiver' # This receiver will be defined in the AlertmanagerConfig CRD
      group_by: ['alertname', 'cluster', 'service', 'severity'] # Global grouping
      group_wait: 30s # Wait 30 seconds for more alerts to join a new group
      group_interval: 5m # For existing groups, wait 5 minutes before sending new alerts
      repeat_interval: 4h # Re-send persistent alerts every 4 hours
      routes: [] # Specific routes will be defined in the AlertmanagerConfig CRD

    receivers:
      - name: 'default-receiver'
        # This receiver primarily serves as a placeholder for the `route.receiver` above.
        # Its actual notification details will be defined in the AlertmanagerConfig CRD.
        # If you wanted a fallback Slack here, you could add it:
        # slack_configs:
        #   - channel: '#alerts-general-fallback'
        #     api_url: 'YOUR_SLACK_WEBHOOK_URL_GENERAL'
        #     text: '{{ template "slack.default.message" . }}'

    # --- TEMPLATE LOADING ---
    # The template content is now defined directly within this config string.
    # Alertmanager will parse this as if it were loaded from a file.
    templates:
      - name: 'email.tmpl'
        # The content of your email.tmpl file goes here, indented correctly.
        template: |
          {{ define "email.default.subject" -}}
          {{ .Status | toUpper }}: {{ .CommonLabels.alertname }} for {{ .CommonLabels.service }} ({{ .CommonLabels.severity | toUpper }})
          {{- end }}

          {{ define "email.default.html" -}}
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <style>
                  body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
                  .container { max-width: 600px; margin: 0 auto; background-color: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px 8px 0 0; text-align: center; }
                  .header h1 { margin: 0; font-size: 24px; }
                  .content { padding: 20px; }
                  .alert-box { background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 15px; margin-bottom: 15px; }
                  .alert-box.resolved { background-color: #d4edda; border-color: #c3e6cb; }
                  .alert-info { display: grid; grid-template-columns: 120px 1fr; gap: 10px; margin-bottom: 10px; }
                  .label { font-weight: bold; color: #495057; }
                  .value { color: #212529; }
                  .severity { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; text-transform: uppercase; }
                  .severity.critical { background-color: #dc3545; color: white; }
                  .severity.warning { background-color: #ffc107; color: #212529; }
                  .severity.info { background-color: #17a2b8; color: white; }
                  .footer { background-align: center; margin-top: 30px; font-size: 0.9em; color: #777; }
                  .timestamp { color: #6c757d; font-size: 14px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üö® Alert Notification</h1>
                      <p style="margin: 5px 0 0 0;">{{ .GroupLabels.alertname }}</p>
                  </div>
                  <div class="content">
                      {{ range .Alerts }}
                      <div class="alert-box{{ if eq .Status "resolved" }} resolved{{ end }}">
                          <div class="alert-info">
                              <div class="label">Status:</div>
                              <div class="value">{{ if eq .Status "resolved" }}‚úÖ RESOLVED{{ else }}üî• FIRING{{ end }}</div>
                              
                              <div class="label">Summary:</div>
                              <div class="value">{{ .Annotations.summary }}</div>
                              
                              <div class="label">Description:</div>
                              <div class="value">{{ .Annotations.description }}</div>
                              
                              <div class="label">Severity:</div>
                              <div class="value"><span class="severity {{ .Labels.severity }}">{{ .Labels.severity }}</span></div>
                              
                              {{ if .Labels.instance }}
                              <div class="label">Instance:</div>
                              <div class="value">{{ .Labels.instance }}</div>
                              {{ end }}
                              
                              {{ if .Labels.pod }}
                              <div class="label">Pod:</div>
                              <div class="value">{{ .Labels.pod }}</div>
                              {{ end }}
                              
                              {{ if .Labels.service }}
                              <div class="label">Service:</div>
                              <div class="value">{{ .Labels.service }}</div>
                              {{ end }}
                              
                              <div class="label">Started:</div>
                              <div class="value timestamp">{{ .StartsAt.Format "2006-01-02 15:04:05 MST" }}</div>
                              
                              {{ if .EndsAt }}
                              <div class="label">Ended:</div>
                              <div class="value timestamp">{{ .EndsAt.Format "2006-01-02 15:04:05 MST" }}</div>
                              {{ end }}
                          </div>
                      </div>
                      {{ end }}
                  </div>
                  <div class="footer">
                      <p>üîç Prometheus Alertmanager | Cluster: {{ .GroupLabels.cluster | default "N/A" }} | Namespace: {{ .GroupLabels.namespace | default "N/A" }}</p>
                  </div>
              </div>
          </body>
          </html>
          {{- end }}

  # Pod anti-affinity to spread Alertmanager instances across nodes
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - alertmanager
        - key: alertmanager
          operator: In
          values:
          - kube-prometheus-stack-alertmanager
      topologyKey: kubernetes.io/hostname

  # Selector for AlertmanagerConfig resources to merge with this config
  alertmanagerConfigSelector:
    matchLabels:
      release: kube-prometheus-stack

  # This ensures the service account token is automatically mounted for the pod.
  automountServiceAccountToken: true 

  # The external URL where this Alertmanager instance can be reached.
  externalUrl: http://kube-prometheus-stack-alertmanager.monitoring:9093 

  # The Docker image and version for the Alertmanager pods.
  image: quay.io/prometheus/alertmanager:v0.28.1 

  # If true, Alertmanager will only listen on localhost. False means it listens on all interfaces.
  listenLocal: false

  # Number of replicas for Alertmanager
  replicas: 1 # Typically 1 for non-HA, 2 or more for HA.
